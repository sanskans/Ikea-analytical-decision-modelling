# -*- coding: utf-8 -*-
"""Ikea

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GxLIcPzJwfmc6f4rqweD6NTugwPI-kRy

# Ikea

## Objective and Prerequisites

Ikea wants to maximize their profit by determining the number of Model S Frames (S) and Model LX Frames
(LX) they should manufacture. The objectives of Ikea problem are:

* The number of frames should be less than maximum assembly capacity that can be manufactured,
* Total stamping and framing hours per month cannot exceed the available

---
## Problem Description

Ikea wants to decide how many of each frame types - Model S Frames(S) and Model LX Frames(LX) to manufacture at the factory. Each frame generates a revenue of 17.5 and 22 dollars respectively per unit. Stamping and Framing process is same for both frames.
In any given month, there are 850 hours of stamping machine hours and 850 hours of assembly machine hours available.
Each frame total costs 16.35 and 19.3 dollars respectively per unit. Stamping and Framing process is same for both frames.
Ikea wants to know how many of each frame type he should manufacture such that his profit is maximized, but they cannot manufacture more than 2000 Model S Frames (S) and 1700 Model LX Frames (LX), and they cannot extend the machine hours.

## Model Formulation

### Indices

$i \in \{S,LX\}$: Index to represent different frame types.

### Parameters

$R_{i}$: Revenue per unit of frame type $i$.

$TC$: Total cost per unit of frame type $i$.

$VSC$: Variable cost of stamping per unit.

$VFC$: Variable cost of framing per unit.

$VACMS$: Variable cost of assembling Model S per unit.

$VACMLX$: Variable cost of assembling Model LX per unit.

$DMC$: Direct material cost of frames per unit.

$DLSC$: Direct labour stamping cost of frames per unit.

$DLFC$: Direct labour forming cost of frames per unit.

$DLAC$: Direct labour assembly cost of frames per unit.

$SM_{i}$: Stamping machine hours per unit for frame type $i$.

$FM_{i}$: Framing machine hours per unit for frame type $i$.

$ASM$: Available stamping machine hours per month.

$AFM$: Available framing machine hours per month.

$N_{i}$: Maximum number of frame for assembly machine type $i$.

### Decision Variables

$x_{i}$: Number of frames type $i$ to manufacture .

## Python Implementation

We now import the Gurobi Python Module
"""

pip install gurobipy

import gurobipy as gp
from gurobipy import GRB

"""Set up the model"""

#####################################################
#                    Model Formulation
#####################################################

m = gp.Model('Ikea')

#Input Parameters
frame_type = [*range(0,2)]
frame_type_label =['S','LX']

R = [17.5,22.0]   #Revenue per unit of frame type i
VSC = [0.7,0.8] #Variable cost of stamping per unit
VFC = [1.2,1.6] #Variable cost of framing per unit.
VACMS = [1.65,0.0] #Variable cost of assembling Model S per unit.
VACMLX = [0.0,1.80] #Variable cost of assembling Model LX per unit.
DMC = [11.0,13.0] #Direct material cost of frames per unit.
DLSC = [0.35, 0.35] #Direct labour stamping cost of frames per unit.
DLFC = [0.65,0.9] #Direct labour forming cost of frames per unit.
DLAC = [0.8, 0.85] #Direct labour assembly cost of frames per unit.
SM = [0.25,0.25] #Stamping machine hours per unit for frame type $i$.
FM = [0.3,0.6] #Framing machine hours per unit for frame type $i$.
ASM = 850.0 #Available stamping machine hours per month.
AFM = 850.0 #Available framing machine hours per month.
N = [500.0,1500.0] #Maximum number of frame for assembly machine type $i$.

TC = [a + b + c + d + e + f + g + h for a, b, c, d, e, f, g, h in zip(VSC, VFC, VACMS, VACMLX, DMC, DLSC, DLFC, DLAC)] #Total cost per unit of frame type i
print(TC)

#Decision Variable
x = m.addVars(frame_type, vtype=GRB.CONTINUOUS, name=frame_type_label)

# Set the Maximize Obijective: Total profit
m.setObjective(gp.quicksum((R[i]-TC[i])*x[i]
                          for i in frame_type),  GRB.MAXIMIZE)

# Total frames manufactured must be less than or equal to maximum that can be accomodated in assembly machine
c1 = m.addConstrs((x[i] <= N[i] for i in frame_type), name = 'cannot exceed maximum frames')

#Stamping machine hours cannot exceed available
c2 = m.addConstr((gp.quicksum(SM[i]*x[i] for i in frame_type) <= ASM), name = 'cannot exceed available stamping machine hours')

#Available machine hours cannot exceed available
c3 = m.addConstr((gp.quicksum(FM[i]*x[i] for i in frame_type) <= AFM), name ='cannot exceed available framing machine hours')

#Set Non-negative Decision Variable
c4 = m.addConstrs((x[i] >= 0 for i in frame_type), name = 'non-negative number of frames')

"""Solve the model"""

# Run the optimize solver
m.optimize()

"""Results of the Model"""

# Get the Optimal Solution for X
print("The Optimal number of each frame type to be set up for maximum profit\n")
m.printAttr('X')
def comma_value(number):
    return ("{:,}".format(number))
# print("\nTotal profit: $%8.2f" % (m.ObjVal))
print("\nTotal profit: $",comma_value(m.ObjVal)) #per hour
# m.printAttr('RHS')
# m.printAttr('Slack')

"""More details on profits and resources used for each frame type"""

#Finding amount of Profit generated by each frame type
e = m.getObjective()
margin = [e.getCoeff(i) for i in frame_type ]
frames = [v.x for v in m.getVars()]
revenue = [margin[i]*frames[i] for i in frame_type]
for i in frame_type:
  print("Profit generated by",frame_type_label[i],"frame is $",comma_value(revenue[i]))

#Finding the number of stamping machine hours used by each frame type
stamping_machine_hour_used = [SM[i]*frames[i] for i in frame_type]
for i in frame_type:
  print("Number of Stamping machine hours used by",frame_type_label[i],"frame is",comma_value(stamping_machine_hour_used[i]))

print("Total Stamping Machine hours used is",comma_value(sum(stamping_machine_hour_used)))

#Finding the number of Framing machine hours used by each frame type
framing_machine_hour_used = [FM[i]*frames[i] for i in frame_type]
for i in frame_type:
  print("Number of framing machine hours used by",frame_type_label[i],"frame is",comma_value(framing_machine_hour_used[i]))

print("Total framing machine hours",comma_value(sum(framing_machine_hour_used)))

"""##  Conclusion

In the above problem we determined the number of frames that need to be manufactured at Ikea to obtain the maximum profit keeping in mind the maximum frames in assembly manufacturing, stamping machine and framing machine hour constarints.
It is seen that the number of frames to be manufactured are 0 for Model S type and 354.167 (~354) for the Model LX type
In conclusion, Doug Jameson was correct keeping in mind the constraints.

"""